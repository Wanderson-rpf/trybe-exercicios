// Aparentemente estÃ¡ tudo funcionando, mas a aplicaÃ§Ã£o nÃ£o possui fluxo de exceÃ§Ã£o. Ou seja, caso ocorra um erro, 
// eles nÃ£o serÃ£o tratados. Que tal resolver isso?

// 1 ðŸš€ - Crie erros personalizados.
// Tente executar a aplicaÃ§Ã£o com um dos valores em branco. Notou que o retorno nÃ£o Ã© muito descritivo?

// Utilize o throw new Error e o bloco try/catch.

// Evite funÃ§Ãµes que tenham muitas responsabilidades distintas.

// Caso a pessoa usuÃ¡ria nao preencha nenhum input, ou preencha apenas um input, lance um erro.

// Caso os valores inseridos nos inputs pela pessoa usuÃ¡ria nÃ£o sejam nÃºmeros, lance um erro. Para isso vocÃª pode 
// utilizar a funÃ§Ã£o isNan().

// Adicione o texto do erro no parÃ¡grafo com id result, para que a pessoa usuÃ¡ria saiba o que aconteceu. Lembre-se 
// de usar erros descritivos!

// Utilize o finally para apagar os valores dos inputs ao final do bloco try/catch.

const validValue = (val1, val2) => {
  if (!val1 || !val2) { // * Verificando se ambos os valores foram preenchidos
    throw new Error('Informe os valores para realizar a soma.');
  }
  if (isNaN(val1) || isNaN(val2)) { // * Verificando se os valores sÃ£o numeros
    throw new Error('Os valores precisam ser nÃºmeros.');
  }
};

function sum() {
  try {
    const value1 = document.getElementById('value1').value;
    const value2 = document.getElementById('value2').value;

    validValue(value1, value2);

    const result = Number(value1) + Number(value2);
    document.getElementById('result').innerHTML = `Resultado: ${result}`;

  } catch (err) {
    document.getElementById('result').innerHTML = `Erro: ${err.message}`;

  } finally {
    document.getElementById('value1').value = '';
    document.getElementById('value2').value = '';
  }

}
window.onload = () => {
  const button = document.getElementById('button');
  button.addEventListener('click', sum);
}